20180403：
1.配置好了eclipse oxygen ，搭建好了maven的环境，挡下来了所有的文件，一共有5各中心 一个中心分为了一个 api
和一个provider。把provider拆分成三个目录 dao SVC 和app 。api中是service借口和实体类dto。 svc中是service的具体实现类。
app中的是xml的一些配置  具体是什么东西 今天暂时还没有弄明白。
2.配置好了edas配置中心  服务开启以后可以进行监听服务。安装好了redis具体的用法现在还不知道。要运行一个startup的
批处理文件
3.前端目前没有代码权限，不过安装好了nodejs以及各种的插件希望以后可以用的上，多学学vue。

明天的任务：跑通所有的工程项目，明白这里的数据库是怎么连接的。运行起来测试环境自己争取写一个demo出来看看。

20180404：
1.@Autowired 注解  spring注解 配置service（bean对象）的时候可以自动做get 和set方法。
用法： @Autowired

private IUserDao userdao;

2.@Repository 注解 spring注解 用于标注数据访问组件，即DAO组件；一个稍大的项目中，如果组件采用xml的bean定义来配置，显然会增加配置文件的体积，查找以及维护起来也不太方便。 
用法：
@Repository
public class CntmtestDao extends ZxptDao implements ICntMtestDao{

3.之前的sql全部都是再用string拼接，现在这边都是用stringbuffer
string 和stringbuffer的区别是string是不可改变的对象（每次改变string相当于生成了一个新对象），stringbuffer是可改变的对象。
在字符串需要多次改变拼接sql的时候 stringbuffer的速度回比string快很多。尤其是多个string对象拼接的时候，sb性能明显
更加优越。sbbuffer.append（）；
stringbuffer是一个线程安全的可变字符序列，StringBuffer 上的主要操作是 append 和 insert。可将字符串缓冲区安全地用于多个线程。
stringbuilder是一个不能保证同步的可改变的类，行能大于stringbuffer但是线程不安全。用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。

4.spring 注解@Service用于标注业务层组件，@Controller用于标注控制层组件（如struts中的action）,@Repository用于标注数据访问组件，即DAO组件，而@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。

5.@Transactional注解  spring注解  开启事务。
A. 一个功能是否要事务，必须纳入设计、编码考虑。不能仅仅完成了基本功能就ok。
B. 如果加了事务，必须做好开发环境测试（测试环境也尽量触发异常、测试回滚），确保事务生效。
C. 以下列了事务使用过程的注意事项，请大家留意。
1. 不要在接口上声明@Transactional ，而要在具体类的方法上使用 @Transactional 注解，否则注解可能无效。
2.不要图省事，将@Transactional放置在类级的声明中，放在类声明，会使得所有方法都有事务。故@Transactional应该放在方法级别，不需要使用事务的方法，就不要放置事务，比如查询方法。否则对性能是有影响的。
3.使用了@Transactional的方法，对同一个类里面的方法调用， @Transactional无效。比如有一个类Test，它的一个方法A，A再调用Test本类的方法B（不管B是否public还是private），但A没有声明注解事务，而B有。则外部调用A之后，B的事务是不会起作用的。（经常在这里出错）
4.使用了@Transactional的方法，只能是public，@Transactional注解的方法都是被外部其他类调用才有效，故只能是public。道理和上面的有关联。故在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错，但事务无效。
5.经过在ICORE-CLAIM中测试，效果如下：
A.抛出受查异常XXXException，事务会回滚。
B.抛出运行时异常NullPointerException，事务会回滚。
C.Quartz中，execute直接调用加了@Transactional方法，可以回滚；间接调用，不会回滚。（即上文3点提到的）
D.异步任务中，execute直接调用加了@Transactional方法，可以回滚；间接调用，不会回滚。（即上文3点提到的）
E.在action中加上@Transactional，不会回滚。切记不要在action中加上事务。
F.在service中加上@Transactional，如果是action直接调该方法，会回滚，如果是间接调，不会回滚。（即上文3提到的）
G.在service中的private加上@Transactional，事务不会回滚。 

6消息队列 oss drds  多线程并发事物 提交

20180409
入手媒体资源展示，限寄物品查询，重量规格超标。
媒体资源展示 cnt media 命名
限寄物品查询，重量规格超标 sup命名  一个是limit 一个是qualify
这边目前的任务 就是dao层和service层  目前怎么把返回的对象pagedata 以json的格式传回到前台 目前还不知道

晚上自己重新的 看了spring 
spring ioc 控制反转  也可以叫依赖注入。  我们的通过接口来编程，spring 的ioc容器来为我们提供对象。通过xml文件的配置 或者通过注解的方式来获取对象。比如
IDataSourceUCC dataSourceUCC = AppContext.getService("dataSourceUCC", IDataSourceUCC.class);
在getservice方法里面  调用了 getbean方法来获得bean（ioc）容器中的对象
object bean = context.getbean（beanName）；
spring的容器 就是context

bean初始化就是程序开始加载的时候 读取xml文件，通过xml文件来初始化javabean。

bean的注入方法：设值注入 和 构造注入
设值注入：<bean   id   class>
                  <property  name  ref></property>
          </bean>
通过property的方式来给bean增加依赖。
构造注入：<bean>
                  <constructor-arg   name  ref></property>
          </bean>
构造注入 costructor-arg 是构造器 通过ref来找到相互依赖的bean再注入。

两种注入的区别：设置注入 可以用 depends on  来处理 依赖关系 决定哪一个bean可以被 先注入  多用 设置 注入的方法

构造注入 在关系不复杂的时候可以使用

20170411
关于现在的项目底层。目前的dao层返回的对象都是通过底层的方法处理过后返回的pagedata类型的对象。里面的 items是一个list的泛型，存储了从数据库里取出来的对应得实力体类对象。
把数据库的字段关系对应到实体类是 在底层调用了 jdbctemplate的rowmarrer方法。
在最底层的filldatainclass里面吧对应的sql查询的resultset和需要的实体类对象还有pagedata一一对应返回pagedata的对象。
目前在看的一个关于接口的远程调用的工程
从消息队列 或者txt文件 或者json来解析数据。
有一个prase 一个receive 通过xml文件的配置来解析接受文件然后对应在表里面。进行crud。
现在的关键是需要一个入口的类或者是一个action
昨天说自己写一个servlet  自己回去试试写了一个，关于servlet类里面的service方法 ，他更具request的请求来决定到底调用的是get还是post方法。里面的 req.getmethod方法当时很不理解。httprequest是一个抽象的接口类 没有任何的实体方法，他的getmethod（）方法到底是如何实现的。现在想想 在service方法传入的参数 就是一个req的实例对象，应该这就是他的实体化对象，post或者get是他的一个属性可以通过getset方法来取得。目前先这么理解。

20170412
应对420的上线 目前在学习esb企业服务总线
目前是支持ftp，esb，mq的线上数据传输 ，传输的数据有txt，json，已经zip文件。今天 做的工作是配置了工程以，现在理解是配置对应的net（连接的服务方的地址，用户名，密码），esbconfig（<destationSend>里面配置类型（现在是消息队列mq）），receive，prase，四个xml文件前两个是配置esb信息已经连接的服务器的信息，receive里面配置接收
<select>
			<mark>XZQHXX</mark>
			<fields>
				<field>
					<mark>dist_cd</mark>
					<value>
						`${XZQHXX_01}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>prov_name</mark>
					<value>
						`${XZQHXX_02}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>prov_abbr</mark>
					<value>
						`${XZQHXX_03}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>PROV_ABBR_NAME</mark>
					<value>
						`${XZQHXX_04}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>city_name</mark>
					<value>
						`${XZQHXX_05}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>city_abbr</mark>
					<value>
						`${XZQHXX_06}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>city_abbr_name</mark>
					<value>
						`${XZQHXX_07}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>cty_name</mark>
					<value>
						`${XZQHXX_08}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>cty_abbr</mark>
					<value>
						`${XZQHXX_09}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>city_abbr_name</mark>
					<value>
						`${XZQHXX_10}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>stat_cd</mark>
					<value>
						`${XZQHXX_11}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>lev_cd</mark>
					<value>
						`${XZQHXX_12}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>created_time</mark>
					<value>
						`${XZQHXX_13}`
					</value>
					<decode></decode>
				</field>
				<field>
					<mark>modified_time</mark>
					<value>
						`${XZQHXX_14}`
					</value>
					<decode></decode>
				</field>
			</fields>
		</select>
这里配置了取到的信息以表格一行的形式 用key value 的方式存在map里面。
prase文件负责文件的转换
<record>
		<mark></mark>
		<operationMode>1</operationMode>
		<tableName>bic_district</tableName>
		<column>
			<columnName>DIST_CD</columnName>
			<dataType>varchar</dataType>
			<nullable>no</nullable>
			<default></default>
			<comments>行政区划代码</comments>
			<fieldName>dist_cd</fieldName>
		</column>
     	<column>
			<columnName>PROV_NAME</columnName>
			<dataType>varchar</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>省名称</comments>
			<fieldName>prov_name</fieldName>
		</column>
		<column>
			<columnName>PROV_ABBR_NAME</columnName>
			<dataType>varchar</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>省简拼</comments>
			<fieldName>PROV_ABBR_NAME</fieldName>
		</column>
		<column>
			<columnName>CITY_NAME</columnName>
			<dataType>varchar</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>地市名</comments>
			<fieldName>city_name</fieldName>
		</column>
		<column>
			<columnName>CITY_ABBR</columnName>
			<dataType>varchar</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>地市简拼</comments>
			<fieldName>city_abbr</fieldName>
		</column>
		<column>
			<columnName>CITY_ABBR_NAME</columnName>
			<dataType>varchar</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>地市简称</comments>
			<fieldName>city_abbr_name</fieldName>
		</column>
		<column>
			<columnName>CTY_NAME</columnName>
			<dataType>varchar</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>区县名称</comments>
			<fieldName>cty_name</fieldName>
		</column>
		<column>
			<columnName>CTY_ABBR</columnName>
			<dataType>varchar</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>区县简拼</comments>
			<fieldName>cty_abbr</fieldName>
		</column>
		<column>
			<columnName>CTY_ABBR_NAME</columnName>
			<dataType>varchar</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>区县简称</comments>
			<fieldName>cty_abbr_name</fieldName>
		</column>
		<column>
			<columnName>STAT_CD</columnName>
			<dataType>varchar</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>状态代码</comments>
			<fieldName>stat_cd</fieldName>  
		</column>
		<column>
			<columnName>LEV_CD</columnName>
			<dataType>tinyint</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>等级</comments>
			<fieldName>lev_cd</fieldName>
		</column>
		<column>
			<columnName>CREATED_TIME</columnName>modified_time
			<dataType>datetime</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>创建时间</comments>
			<fieldName>created_time</fieldName>
		</column>
		<column>
			<columnName>MODIFIED_TIME</columnName>
			<dataType>datetime</dataType>
			<nullable>yes</nullable>
			<default></default>
			<comments>修改时间</comments>
			<fieldName>modified_time</fieldName>
		</column>
		<!-- <column>
			<columnName>insert_time</columnName>
			<dataType>def_date</dataType>
			<nullable>yes</nullable>
			<default>now()</default>
			<comments>插入时间</comments>
			<fieldName></fieldName>
		</column> --> 
	</record>
把接受的信息一行转换存到表里面

正在写一个servlet 把项目打war包，放在linux的tomcat上面跑一下。
目前已经跑通了但是消息队列里面没有数据

20180412：
联系了人  等他们往消息队列里面放数据，希望不要有很多的错误
和人打交道真心是麻烦 才让发了几次消息队列 就不耐烦了。  今天看了接口工程的代码，解析json xml和txt的  要有心得还是得在看看。

20180413：
昨晚测试的最后一遍：|ERROR|cn.chinapost.jdpt.inter.core.exception.BzException: [API-R-0007]数据接收配置—param为空
在接受的时候读formart的时候读取的参数是空的，现在在想是不是 
String datatype = jobContext.getInterMsg().getFormatType();



else if (datatype.equals("XML")) {
				params.put("param", "RECORDS,RECORD,subs");
				convert = new XmlConvert();
				// 填充转换结果
				List<Map<String, Object>> list = convert.convert(jobContext.getBodyStr(), params);
				logger.info("转换结果长度==" + list.size() + "==" + jobContext.getInterfaceName());
在自己配置的xml文件中

		<format>
			<type>xml</type>
			<param></param>
			<head></head>
			<end></end>
		</format>
分明已经配置了type，所以 就是没有走到 。
哇哇哇哇哇  用了这么多次  equals看结果不知道  他是不区分大小写的！！！！！！！！
1.equals()函数：

    主要是区分“比较的字符串” 大小写和长度时候相同，比较的类型可以是Object类型。

2.equalsIgnoreCase()函数：

    比较的参数只能是字符串，这里只要字符串的长度相等，字母的大小写是忽略的。认为A-Z和a-z是一样的。
mysql的分页函数：
--1.最常用的分页
select * from content order by id desc limit 0, 10;
--limit是MySQL中特有的分页语法，用法如下：
--举例：
select * from tableName limit 5; --返回前5行
select * from tableName limit 0,5; --同上，返回前5行
select * from tableName limit 5,10; --返回6-15行

sqlsever分页：
适用于 SQL Server 2000/2005

SELECT TOP 页大小 *

FROM table1

WHERE id NOT IN

2.。。
SELECT TOP 页大小*(页数-1) id FROM table1 ORDER BY id

适用于 SQL Server 2005
SELECT TOP 页大小 *
FROM
(
SELECT ROW_NUMBER() OVER (ORDER BY id) AS RowNumber,* FROM table1
) A
WHERE RowNumber > 页大小*(页数-1)

分页的blog：
https://www.cnblogs.com/ginponson/p/5746435.html


关于jax wsdl 的webservice：目前对webservice的理解就是在互联网上远程的调用别人服务端的接口。
关于webservice的服务端编写https://www.cnblogs.com/xiaotao726/p/4522881.html
详细的例子在这个网站上面有，自己写一个webservice的服务接口  用@webservice注解注解，然后发布
public static void main(String[] args) { 
       Endpoint.publish("http://localhost:8088/calculator", 
               new CalculatorService()); 
   }  
url是自己的本地的端口加上自己
3、客户端程序的调用

    客户端的代码建议使用wsimport 去生成(前提：在你的电脑上已经配置了JDK的环境变量)

    直接在CMD中运行：

wsimport -keep -p com.st.client http://localhost:8088/calculator?wsdl 

  -p : 定义生成包的包名(可以不写)

然后将生成的java类放到项目中进行调用 

后面我自己用的一段是：wsimport -keep -s d:\asd  http://localhost:8088/calculator?wsdl
wsimport -keep -s d:\asd com.st.client http://localhost:8088/calculator?wsdl 
-s 是指定需要生成的代码的地址。http://198.10.3.176:7002/jyx

wsimport -keep -s d:\aaa  http://198.10.3.176:7002/jyx?wsdl

调用的以后会生成相应的webservice代码，相应的代码和调用放在了webservice文件夹下面
JYX_Service js = new JYX_Service();
		JYX port = js.getJYXImplPort();
		String abc = port.jyxSvr(json2);
先实例化service对象（他是作为链接远程服务的一个类）。
通过service对象调用webservice 的方法 ，JYX是一个接口，通过服务连接的service去调用返回接口jyx
再用接口去调用相应的方法。
这是作为服务端的。

20180504
最近这几天都在做json拼接的事情；
目前来看，jsonobject和一个类是一个存在一一对应的（JavaBean）或者说一个实体类。一个大的json可以理解为一个map<string,obj>可以和jsonobj互相转换.  其中如果结构复杂的话obj又可以是一个新的map，的一个大的树形的结构，最终的没个叶子节点都会是一个javabean（obj）。一个list是一个jsonarray，里面的每次一个循环可以作为一个对象去看，一个list里面 每一个obj也可以是一个map（复杂结构）。

一个程序中 最多两个事物，三个的话 就很难保证一致性。

20180620
最近对于拼写json报文 已经没有任何问题 可以说 对于json的任何操作都可驾驭了。
复杂类型的对象 属性有string有list可直接转json。

尝试了用jdk和cxf的方式创建和调用webservcie
jdk：
import javax.xml.ws.Endpoint;

import cxf.wsinterface;
import cxf.wsinterfaceImpl;

/**
 * @Description:TODO
 * @author: hyc
 * @date:   2018年6月20日 下午2:16:20
 */
public class service {
    public static void main (String args[]) {
    	System.out.println("开始webservice");
    	wsinterface ws = new wsinterfaceImpl();
    	String address = "http://100.5.8.52:8080/hello";    
        Endpoint.publish(address, ws);  // JDK实现  
         System.out.println("服务已启动");  
    }
}

主要需要创建一个endpoint 传入相对应的写好的接口和自己的ip  webservice 就可以发布
调用的时候在cmd输入命令 可以直接生成调用的代码。  根据代码 可以写出对于


/**
 * @Description:TODO
 * @author: hyc
 * @date:   2018年6月20日 下午3:36:45
 */
public class wsclient {
	public static void main(String args[]) {
		WsinterfaceImpl aa = new WsinterfaceImplService().getWsinterfaceImplPort();
		String fuck = aa.wstest("asdasdasd");
	    System.out.println("shinime "+fuck);
	}

}
创建新的接口类 用实现类去实例化 getport   就可以直接调用方法。

用cxf调用：
import org.apache.cxf.jaxws.JaxWsServerFactoryBean;

import cxf.wsinterface;
import cxf.wsinterfaceImpl;

/**
 * cxf启动webservice
 * @author: hyc
 * @date:   2018年6月20日 下午4:34:05
 */
public class cxfservice {
        public static void main(String args[]) {
        	System.out.println("begin"
        			+ "cxf webservice");
			wsinterface wsinterface = new wsinterfaceImpl();
			String address = "http://100.5.8.52:8080/cxfhello";
			JaxWsServerFactoryBean factoryBean = new JaxWsServerFactoryBean();
			factoryBean.setAddress(address);
			factoryBean.setServiceClass(wsinterface.class);
			factoryBean.setServiceBean(wsinterface);
			factoryBean.create();
			System.out.println("success");
		}
}
cxf提供了JaxWsServerFactoryBean  给bean设置属性以后创建 服务 就能起来  

调用的时候：
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean();  
        factory.setServiceClass(wsinterface.class);  
        factory.setAddress("http://100.5.8.52:8080/cxfhello");  
        wsinterface helloworld = (wsinterface) factory.create();  
        System.out.println(helloworld.wstest("outofmemory.cn"));  
        System.exit(0);  
	}

}
直接用接口对象  点出来方法就好
接口不可以实例化  接口对象可以直接指向他的实现类对象


bigdecimal ：
 public BigDecimal add(BigDecimal augend):加 
 *      public BigDecimal subtract(BigDecimal subtrahend):减 
 *      public BigDecimal multiply(BigDecimal multiplicand):乘 
 *      public BigDecimal divide(BigDecimal divisor):除 
 *      public BigDecimal divide(BigDecimal divisor,int scale,int roundingMode):商,几位小数,如何舍取。 
计算价格的时候基本都会用到
用